import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# main task acc
# sigma_acc = {
#     0: 48.5,
#     0.05: 48.04,
#     0.1: 48.55,
#     0.5: 48.64,
#     1: 49.32,
#     2: 48.27,
#     3: 48.97,
#     4: 48.63,
#     5: 48.38,
#     6: 49.62,
#     7: 48.95,
#     8: 49.07,
#     9: 49.49,
#     10: 49.12
# }

# sigma_mia = {
#     0: 0.3653373170173851,
#     0.05: 0.347835995271528,
#     0.1: 0.3688011237365729,
#     0.5: 0.3541718137206139,
#     1: 0.35065687161316933,
#     2: 0.3569748989477304,
#     3: 0.37843643572024505,
#     4: 0.3736303845881459,
#     5: 0.3660310388627573,
#     6: 0.38321949916084475,
#     7: 0.3590720685384538,
#     8: 0.3825376034644597,
#     9: 0.3743183791113276,
#     10: 0.3562748639173926
# }

sigma_acc = {
    0.0: 0.7347,
    0.05: 0.7329,
    0.1: 0.737,
    0.5: 0.7319,
    1.0: 0.7117,
    2.0: 0.7332,
    3.0: 0.7362,
    4.0: 0.7219,
    5.0: 0.7282,
    6.0: 0.7366,
    7.0: 0.7379,
    8.0: 0.7335,
    9.0: 0.7221,
    10.0: 0.7257
}

sigma_mia = {
    0.0 : 0.08111905128479203,
    0.05 : 0.0756639039209896,
    0.1 : 0.07603468627599758,
    0.5 : 0.0764053312024053,
    1.0 : 0.06597498892353292,
    2.0 : 0.0852598439508234,
    3.0 : 0.08305355513528566,
    4.0 : 0.0718554371004281,
    5.0 : 0.07408654335269817,
    6.0 : 0.08764450985204626,
    7.0 : 0.08443305597482938,
    8.0 : 0.07881118042428985,
    9.0 : 0.07473634611401708,
    10.0 : 0.0727856697256476
}

config_acc = {
    0: 0.735,
    1: 0.7366,
    2: 0.7112,
    3: 0.7319,
    4: 0.7251,
    5: 0.729,
    6: 0.7335,
    7: 0.7233,
    8: 0.7302,
    9: 0.7169,
    10: 0.7272,
    11: 0.7287,
    12: 0.7418,
    13: 0.7219,
    14: 0.7341,
    15: 0.7309,
    16: 0.7285,
    17: 0.7218,
    18: 0.7312,
    19: 0.7211,
    20: 0.7265,
    21: 0.73,
    22: 0.7277,
    23: 0.7297,
    24: 0.7286,
    25: 0.7394,
    26: 0.7216,
    27: 0.7302,
    28: 0.7293,
    29: 0.7381,
    30: 0.7255,
    31: 0.7347,
    32: 0.7266,
    33: 0.7328,
    34: 0.7081,
    35: 0.7269,
    36: 0.7246,
    37: 0.7259,
    38: 0.7363,
    39: 0.7329,
    40: 0.7267,
    41: 0.732,
    42: 0.729,
    43: 0.7219,
    44: 0.739,
    45: 0.7319
}

config_mia = {
    0: 0.08434114843375096,
    1: 0.08231704248921375,
    2: 0.062880898039201,
    3: 0.08810244822154573,
    4: 0.0769610411361284,
    5: 0.08369755902156667,
    6: 0.07436508195530674,
    7: 0.0822249402556695,
    8: 0.07166928669035968,
    9: 0.06849941642469226,
    10: 0.07027205298533169,
    11: 0.07176236622689079,
    12: 0.07991962317587344,
    13: 0.07705362944229147,
    14: 0.08010424424166136,
    15: 0.0829615207143473,
    16: 0.07352923328811553,
    17: 0.07807153542015544,
    18: 0.07334339422420959,
    19: 0.07455073126429625,
    20: 0.07529298403543135,
    21: 0.07408654335269817,
    22: 0.06859279146561167,
    23: 0.07436508195530674,
    24: 0.06812582904760044,
    25: 0.07631268284916351,
    26: 0.07529298403543135,
    27: 0.07547846117590556,
    28: 0.07510747248680548,
    29: 0.0822249402556695,
    30: 0.07455073126429625,
    31: 0.07677583880204963,
    32: 0.0764053312024053,
    33: 0.0693394780786129,
    34: 0.0701788346212465,
    35: 0.07760897932698288,
    36: 0.07436508195530674,
    37: 0.07705362944229147,
    38: 0.0820407103362094,
    39: 0.08010424424166136,
    40: 0.06896620446472282,
    41: 0.08194858264716733,
    42: 0.08038111194681256,
    43: 0.06961934188005707,
    44: 0.08837711061741292,
    45: 0.08148781684626792,
    46: 0.04554681495597036,
    47: 0.030141156911986808,
    48: 0.03777736433402992,
    49: 0.04898062222162188,
    50: 0.03873982831593065,
    51: 0.04945660871259249,
    52: 0.03893221000178754,
    53: 0.04420825466432028,
    54: 0.038354953876463906,
    55: 0.04152574682849831,
    56: 0.04793265375530272,
    57: 0.03333805961051041,
    58: 0.037681066967688484,
    59: 0.041237908016244766,
    60: 0.03411152962876782,
    61: 0.04888539772981066,
    62: 0.04955177882924771,
    63: 0.044686517622406094,
    64: 0.04650183365141986,
    65: 0.047360571359837574,
    66: 0.04046993255371312,
    67: 0.029267497680568143,
    68: 0.04162167469081945,
    69: 0.04363403702006128,
    70: 0.03941300235683506,
    71: 0.032370380030450646,
    72: 0.033241333779801936,
    73: 0.04008572353928558,
    74: 0.037488444410991605,
    75: 0.03998964821615841,
    76: 0.03527061408191933,
    77: 0.03527061408191933,
    78: 0.041237908016244766,
    79: 0.0453557017207972,
    80: 0.036331929247390204,
    81: 0.035656677208034684,
    82: 0.042676274280436396,
    83: 0.04085399400826612,
    84: 0.05012260940321052,
    85: 0.04459088332787522,
    86: 0.03960525459235942,
    87: 0.04258044753511848,
    88: 0.037488444410991605,
    89: 0.04305948946044701
}

acc_lmo, mia_lmo = {}, {}
plots = {"k":[], "theta": [], "acc": [], "mia": []}
configs = pd.read_excel("../Qt.xlsx")
for i in range(90):
    try:
        k, theta = configs.loc[i, ["k", "theta"]].astype(float)
        acc_lmo = {(k, theta): config_acc[i] * 100}
        mia_lmo = {(k, theta): config_mia[i]}
        plots["k"].append(k)
        plots["theta"].append(theta)
        plots["acc"].append(config_acc[i] * 100)
        plots["mia"].append(config_mia[i])
    except:
        pass

k = [0.5076, 6.6256, 8.8894, 5.6432, 7.5653, 9.6156, 9.103, 9.4447, 9.6583, 9.5729, 9.402, 9.1884, 8.9322, 9.6156, 9.1884, 9.9146, 9.3593, 9.9573, 9.2739, 9.7864, 9.1884, 9.6583, 8.8894, 9.3166, 9.7864, 8.9749, 9.3166, 9.701, 8.8894, 9.2312, 9.5302, 9.8719, 9.0176, 9.3166, 9.5729, 9.8719, 8.9749, 9.2312, 9.4874, 9.7437, 10.0, 9.0603, 9.3166, 9.5302, 9.7437, 9.9573]
theta = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001]
acc = [73.5, 73.66, 71.12, 73.19, 72.50999999999999, 72.89999999999999, 73.35000000000001, 72.33000000000001, 73.02, 71.69, 72.72, 72.87, 74.18, 72.19, 73.41, 73.09, 72.85000000000001, 72.18, 73.11999999999999, 72.11, 72.65, 73.0, 72.77, 72.97, 72.86, 73.94, 72.16, 73.02, 72.92999999999999, 73.81, 72.55, 73.47, 72.66, 73.28, 70.81, 72.69, 72.46000000000001, 72.59, 73.63, 73.29, 72.67, 73.2, 72.89999999999999, 72.19, 73.9, 73.19]
mia = [0.08434114843375096, 0.08231704248921375, 0.062880898039201, 0.08810244822154573, 0.0769610411361284, 0.08369755902156667, 0.07436508195530674, 0.0822249402556695, 0.07166928669035968, 0.06849941642469226, 0.07027205298533169, 0.07176236622689079, 0.07991962317587344, 0.07705362944229147, 0.08010424424166136, 0.0829615207143473, 0.07352923328811553, 0.07807153542015544, 0.07334339422420959, 0.07455073126429625, 0.07529298403543135, 0.07408654335269817, 0.06859279146561167, 0.07436508195530674, 0.06812582904760044, 0.07631268284916351, 0.07529298403543135, 0.07547846117590556, 0.07510747248680548, 0.0822249402556695, 0.07455073126429625, 0.07677583880204963, 0.0764053312024053, 0.0693394780786129, 0.0701788346212465, 0.07760897932698288, 0.07436508195530674, 0.07705362944229147, 0.0820407103362094, 0.08010424424166136, 0.06896620446472282, 0.08194858264716733, 0.08038111194681256, 0.06961934188005707, 0.08837711061741292, 0.08148781684626792]


fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# 第一个图: k, theta - mia
sc1 = ax1.scatter(k, theta, c=mia, cmap="viridis", s=100, edgecolor="k")
ax1.set_title("k, theta - mia")
ax1.set_xlabel("k")
ax1.set_ylabel("theta")
plt.colorbar(sc1, ax=ax1, label="mia")

# 第二个图: k, theta - acc
sc2 = ax2.scatter(k, theta, c=acc, cmap="plasma", s=100, edgecolor="k")
ax2.set_title("k, theta - acc")
ax2.set_xlabel("k")
ax2.set_ylabel("theta")
plt.colorbar(sc2, ax=ax2, label="acc")

plt.tight_layout()
plt.savefig("colormap_ktheta_acc.png")





mia_lmo, acc_lmo, mia_g, acc_g = [], [], [], []
for i in range(90):
    if i in config_mia and i in config_acc:
        # print(config_mia[i], config_acc[i])
        mia_lmo.append(config_mia[i])
        acc_lmo.append(config_acc[i] * 100)

for i in sigma_mia:
    if i in sigma_acc:
        mia_g.append(sigma_mia[i])
        acc_g.append(sigma_acc[i] * 100)



plt.figure(figsize=(10, 6))
plt.scatter(mia_lmo, acc_lmo, color='black', alpha=0.7, label='MG noise')
plt.xlabel("MIA")
plt.ylabel("Accuracy (%)")
plt.title("MG Noise")
plt.grid()
plt.savefig("colormap_lmo.png")
plt.cla()
plt.clf()


plt.figure(figsize=(10, 6))
plt.scatter(mia_g, acc_g, marker='x', label='Gaussian Noise')
plt.xlabel("MIA")
plt.ylabel("Accuracy (%)")
plt.title("Gaussian noise")
plt.grid()
plt.savefig("colormap_g.png")
plt.cla()
plt.clf()



plt.figure(figsize=(10, 6))
plt.scatter(mia_lmo, acc_lmo, color='black', alpha=0.7, label='MG Noise')
plt.scatter(mia_g, acc_g, marker='x', label='Gaussian Noise')
plt.xlabel("MIA")
plt.ylabel("Accuracy (%)")
plt.grid()
plt.legend()
plt.savefig("colormap_g_and_lmo.png")



# config_mia = {}
# with open ("/Users/mac/Documents/PRO/noise_mia/noise_auditing/auditing/1.plot_gaussian/6.colormap.lmo.log", 'r', encoding='utf-8') as f:
#     for r in f.readlines():
#         mia, config_idx = r.strip().split(" | ")[1], r.strip().split(" | ")[2].split("-")[3]
#         config_mia.update({int(float(config_idx)): float(mia)})

# import json
# with open("param.json", "w") as file:
#     json.dump(config_mia, file)




# config_mia, sigma_mia = {}, {}
# with open ("/Users/mac/Documents/PRO/noise_mia/noise_auditing/auditing/1.plot_gaussian/6.colormap.gaussian.log", 'r', encoding='utf-8') as f:
#     for r in f.readlines():
#         try:
#             mia, sigma = r.strip().split(" | ")[1], r.strip().split(" | ")[2].split("-")[3]
#             sigma_mia.update({float(sigma): float(mia)})
#         except:
#             pass

# sigma_mia = dict(sorted(sigma_mia.items()))
# import json
# with open("param.json", "w") as file:
#     json.dump(sigma_mia, file)




# config_acc_gaussian = {}

# import os
# folder = "/Users/mac/Documents/PRO/noise_mia/noise_auditing/auditing/1.plot_gaussian/logs"
# for filename in os.listdir(folder):
#     print(filename)
#     if "lmo" in filename and "T_1000" in filename:
#         pass
#         # with open(os.path.join(folder, filename), 'r', encoding='utf-8') as f:
#         #     for r in f.readlines():
#         #         if "print_results" in r:
#         #             _, filename, acc = r.split(" ")
#         #             config_idx = int(float(filename.split("-")[3]))
#         #             accuracy = float(acc)
#         #             config_acc.update({config_idx: accuracy})
#     elif "gaussian" in filename and "T_1000" in filename:
#         with open(os.path.join(folder, filename), 'r', encoding='utf-8') as f:
#             clip = int(filename.split(".")[4].split("_")[1])
            
#             for r in f.readlines():
#                 if "print_results" in r:
#                     _, filename, acc = r.split(" ")
#                     sigma, clip = float(filename.split("-")[3]), float(filename.split("-")[5])
#                     accuracy = float(acc)
#                     if clip not in config_acc_gaussian:
#                         config_acc_gaussian[clip] = {}
#                     config_acc_gaussian[clip].update({sigma: accuracy})
                    
# config_acc_g = config_acc_gaussian[1.0]


# sorted_by_index = dict(sorted(config_acc_g.items()))
# print(sorted_by_index)
